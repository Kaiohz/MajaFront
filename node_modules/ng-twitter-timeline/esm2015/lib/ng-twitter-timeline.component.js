/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input } from '@angular/core';
import { NgTwitterTimelineService } from './ng-twitter-timeline.service';
export class NgTwitterTimelineComponent {
    /**
     * @param {?} ngTwitterTimelineService
     * @param {?} element
     */
    constructor(ngTwitterTimelineService, element) {
        this.ngTwitterTimelineService = ngTwitterTimelineService;
        this.element = element;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngTwitterTimelineService.loadScript().subscribe((/**
         * @param {?} twttr
         * @return {?}
         */
        twttr => {
            /** @type {?} */
            let nativeElement = this.element.nativeElement;
            window['twttr'].widgets.createTimeline(this.dataSrc, nativeElement, this.opts).then((/**
             * @param {?} embed
             * @return {?}
             */
            function success(embed) {
                console.log('Created tweet widget: ', embed);
            })).catch((/**
             * @param {?} message
             * @return {?}
             */
            function creationError(message) {
                console.log('Could not create widget: ', message);
            }));
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            console.log('****  ERROR LOADING TWITTER WIDGET', err);
        }), (/**
         * @return {?}
         */
        () => { }));
    }
}
NgTwitterTimelineComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-twitter-timeline',
                template: `<div></div>`
            }] }
];
/** @nocollapse */
NgTwitterTimelineComponent.ctorParameters = () => [
    { type: NgTwitterTimelineService },
    { type: ElementRef }
];
NgTwitterTimelineComponent.propDecorators = {
    dataSrc: [{ type: Input }],
    opts: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgTwitterTimelineComponent.prototype.dataSrc;
    /** @type {?} */
    NgTwitterTimelineComponent.prototype.opts;
    /**
     * @type {?}
     * @private
     */
    NgTwitterTimelineComponent.prototype.ngTwitterTimelineService;
    /**
     * @type {?}
     * @private
     */
    NgTwitterTimelineComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdHdpdHRlci10aW1lbGluZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy10d2l0dGVyLXRpbWVsaW5lLyIsInNvdXJjZXMiOlsibGliL25nLXR3aXR0ZXItdGltZWxpbmUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBT3ZFLE1BQU0sT0FBTywwQkFBMEI7Ozs7O0lBR3JDLFlBQW9CLHdCQUFrRCxFQUFVLE9BQW1CO1FBQS9FLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFZO0lBQ25HLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVM7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTs7Z0JBQ3ZELGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7WUFFOUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUk7Ozs7WUFBQyxTQUFTLE9BQU8sQ0FBQyxLQUFLO2dCQUN4RyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQy9DLENBQUMsRUFBQyxDQUFDLEtBQUs7Ozs7WUFBQyxTQUFTLGFBQWEsQ0FBQyxPQUFPO2dCQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3BELENBQUMsRUFDRixDQUFDO1FBQ0osQ0FBQzs7OztRQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN6RCxDQUFDOzs7UUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUMsQ0FBQztJQUNmLENBQUM7OztZQXhCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsUUFBUSxFQUFFLGFBQWE7YUFFeEI7Ozs7WUFOTyx3QkFBd0I7WUFERSxVQUFVOzs7c0JBUzNDLEtBQUs7bUJBQ0wsS0FBSzs7OztJQUROLDZDQUF5Qjs7SUFDekIsMENBQXNCOzs7OztJQUNSLDhEQUEwRDs7Ozs7SUFBRSw2Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ1R3aXR0ZXJUaW1lbGluZVNlcnZpY2V9IGZyb20gJy4vbmctdHdpdHRlci10aW1lbGluZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmctdHdpdHRlci10aW1lbGluZScsXG4gIHRlbXBsYXRlOiBgPGRpdj48L2Rpdj5gLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIE5nVHdpdHRlclRpbWVsaW5lQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5ASW5wdXQoKSBkYXRhU3JjOiBvYmplY3Q7XG5ASW5wdXQoKSBvcHRzOiBvYmplY3Q7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdUd2l0dGVyVGltZWxpbmVTZXJ2aWNlOiBOZ1R3aXR0ZXJUaW1lbGluZVNlcnZpY2UsIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZikge1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMubmdUd2l0dGVyVGltZWxpbmVTZXJ2aWNlLmxvYWRTY3JpcHQoKS5zdWJzY3JpYmUodHd0dHIgPT4ge1xuICAgICAgbGV0IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcblxuICAgICAgd2luZG93Wyd0d3R0ciddLndpZGdldHMuY3JlYXRlVGltZWxpbmUodGhpcy5kYXRhU3JjLCBuYXRpdmVFbGVtZW50LCB0aGlzLm9wdHMpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhlbWJlZCkge1xuICAgICAgICBjb25zb2xlLmxvZygnQ3JlYXRlZCB0d2VldCB3aWRnZXQ6ICcsIGVtYmVkKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGNyZWF0aW9uRXJyb3IobWVzc2FnZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdDb3VsZCBub3QgY3JlYXRlIHdpZGdldDogJywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSwgZXJyID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCcqKioqICBFUlJPUiBMT0FESU5HIFRXSVRURVIgV0lER0VUJywgZXJyKTtcbiAgICB9LCAoKSA9PiB7fSk7XG4gIH1cbn1cbiJdfQ==