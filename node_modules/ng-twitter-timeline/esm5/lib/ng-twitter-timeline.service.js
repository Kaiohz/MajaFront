/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
var NgTwitterTimelineService = /** @class */ (function () {
    function NgTwitterTimelineService() {
        this.TWITTER_SCRIPT_ID = 'twitter-wjs';
        this.TWITTER_WIDGET_URL = 'https://platform.twitter.com/widgets.js';
    }
    /**
     * @return {?}
     */
    NgTwitterTimelineService.prototype.loadScript = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            _this.startScriptLoad();
            window['twttr'].ready((/**
             * @param {?} twttr
             * @return {?}
             */
            function onLoadTwitterScript(twttr) {
                observer.next(twttr);
                observer.complete();
            }));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    NgTwitterTimelineService.prototype.startScriptLoad = /**
     * @private
     * @return {?}
     */
    function () {
        window['twttr'] = ((/**
         * @param {?} d
         * @param {?} s
         * @param {?} id
         * @param {?} url
         * @return {?}
         */
        function (d, s, id, url) {
            /** @type {?} */
            var js;
            /** @type {?} */
            var fjs = d.getElementsByTagName(s)[0];
            /** @type {?} */
            var t = window['twttr'] || {};
            if (d.getElementById(id)) {
                return t;
            }
            js = d.createElement(s);
            js.id = id;
            js.src = url;
            fjs.parentNode.insertBefore(js, fjs);
            t._e = [];
            t.ready = (/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                t._e.push(f);
            });
            return t;
        })(document, 'script', this.TWITTER_SCRIPT_ID, this.TWITTER_WIDGET_URL));
    };
    NgTwitterTimelineService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgTwitterTimelineService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgTwitterTimelineService.ngInjectableDef = i0.defineInjectable({ factory: function NgTwitterTimelineService_Factory() { return new NgTwitterTimelineService(); }, token: NgTwitterTimelineService, providedIn: "root" });
    return NgTwitterTimelineService;
}());
export { NgTwitterTimelineService };
if (false) {
    /** @type {?} */
    NgTwitterTimelineService.prototype.TWITTER_SCRIPT_ID;
    /** @type {?} */
    NgTwitterTimelineService.prototype.TWITTER_WIDGET_URL;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdHdpdHRlci10aW1lbGluZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctdHdpdHRlci10aW1lbGluZS8iLCJzb3VyY2VzIjpbImxpYi9uZy10d2l0dGVyLXRpbWVsaW5lLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQzs7QUFFaEM7SUFRRTtRQUhTLHNCQUFpQixHQUFHLGFBQWEsQ0FBQztRQUNsQyx1QkFBa0IsR0FBRyx5Q0FBeUMsQ0FBQztJQUd4RSxDQUFDOzs7O0lBRUQsNkNBQVU7OztJQUFWO1FBQUEsaUJBV0M7UUFWQyxPQUFPLFVBQVUsQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxRQUFRO1lBQy9CLEtBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUV2QixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSzs7OztZQUNuQixTQUFTLG1CQUFtQixDQUFDLEtBQUs7Z0JBQ2hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3JCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN0QixDQUFDLEVBQ0YsQ0FBQztRQUNKLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTyxrREFBZTs7OztJQUF2QjtRQUNFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDOzs7Ozs7O1FBQUEsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHOztnQkFDcEMsRUFBRTs7Z0JBQ0YsR0FBRyxHQUFHLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O2dCQUNsQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFFN0IsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUN4QixPQUFPLENBQUMsQ0FBQzthQUNWO1lBRUQsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDWCxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNiLEdBQUcsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUVyQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUVWLENBQUMsQ0FBQyxLQUFLOzs7O1lBQUcsVUFBVSxDQUFDO2dCQUNuQixDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNmLENBQUMsQ0FBQSxDQUFDO1lBRUYsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDLEVBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDOztnQkEvQ0YsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7bUNBTEQ7Q0FtREMsQUFoREQsSUFnREM7U0E3Q1ksd0JBQXdCOzs7SUFFbkMscURBQTJDOztJQUMzQyxzREFBd0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ1R3aXR0ZXJUaW1lbGluZVNlcnZpY2Uge1xuXG4gIHJlYWRvbmx5IFRXSVRURVJfU0NSSVBUX0lEID0gJ3R3aXR0ZXItd2pzJztcbiAgcmVhZG9ubHkgVFdJVFRFUl9XSURHRVRfVVJMID0gJ2h0dHBzOi8vcGxhdGZvcm0udHdpdHRlci5jb20vd2lkZ2V0cy5qcyc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBsb2FkU2NyaXB0KCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKG9ic2VydmVyID0+IHtcbiAgICAgIHRoaXMuc3RhcnRTY3JpcHRMb2FkKCk7XG5cbiAgICAgIHdpbmRvd1sndHd0dHInXS5yZWFkeShcbiAgICAgICAgZnVuY3Rpb24gb25Mb2FkVHdpdHRlclNjcmlwdCh0d3R0cikge1xuICAgICAgICAgIG9ic2VydmVyLm5leHQodHd0dHIpO1xuICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXJ0U2NyaXB0TG9hZCgpIHtcbiAgICB3aW5kb3dbJ3R3dHRyJ10gPSAoZnVuY3Rpb24gKGQsIHMsIGlkLCB1cmwpIHtcbiAgICAgIGxldCBqcztcbiAgICAgIGxldCBmanMgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdO1xuICAgICAgbGV0IHQgPSB3aW5kb3dbJ3R3dHRyJ10gfHwge307XG5cbiAgICAgIGlmIChkLmdldEVsZW1lbnRCeUlkKGlkKSkge1xuICAgICAgICByZXR1cm4gdDtcbiAgICAgIH1cblxuICAgICAganMgPSBkLmNyZWF0ZUVsZW1lbnQocyk7XG4gICAgICBqcy5pZCA9IGlkO1xuICAgICAganMuc3JjID0gdXJsO1xuICAgICAgZmpzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGpzLCBmanMpO1xuXG4gICAgICB0Ll9lID0gW107XG5cbiAgICAgIHQucmVhZHkgPSBmdW5jdGlvbiAoZikge1xuICAgICAgICB0Ll9lLnB1c2goZik7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdDtcbiAgICB9KGRvY3VtZW50LCAnc2NyaXB0JywgdGhpcy5UV0lUVEVSX1NDUklQVF9JRCwgdGhpcy5UV0lUVEVSX1dJREdFVF9VUkwpKTtcbiAgfVxufVxuIl19